# Generated from Mithon.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,53,329,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,
        1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,
        1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,
        1,10,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,
        1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,16,
        1,16,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,
        1,20,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,23,1,23,
        1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,
        1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,
        1,32,1,33,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,36,1,37,1,37,
        1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,1,42,1,42,
        1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,
        1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,47,1,47,5,47,280,8,47,10,47,
        12,47,283,9,47,1,48,4,48,286,8,48,11,48,12,48,287,1,49,4,49,291,
        8,49,11,49,12,49,292,1,49,1,49,4,49,297,8,49,11,49,12,49,298,1,50,
        1,50,5,50,303,8,50,10,50,12,50,306,9,50,1,50,1,50,1,51,1,51,1,51,
        1,51,5,51,314,8,51,10,51,12,51,317,9,51,1,51,1,51,1,51,1,51,1,52,
        4,52,324,8,52,11,52,12,52,325,1,52,1,52,2,304,315,0,53,1,1,3,2,5,
        3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
        31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,
        53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,
        75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,
        97,49,99,50,101,51,103,52,105,53,1,0,4,3,0,65,90,95,95,97,122,4,
        0,48,57,65,90,95,95,97,122,1,0,48,57,3,0,9,10,13,13,32,32,335,0,
        1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,
        0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,
        0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,
        0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,
        0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,
        0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,
        0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,
        0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,
        0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,
        0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,
        1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,1,107,1,0,0,0,3,112,1,0,0,0,
        5,118,1,0,0,0,7,120,1,0,0,0,9,122,1,0,0,0,11,126,1,0,0,0,13,133,
        1,0,0,0,15,138,1,0,0,0,17,145,1,0,0,0,19,147,1,0,0,0,21,152,1,0,
        0,0,23,154,1,0,0,0,25,156,1,0,0,0,27,163,1,0,0,0,29,169,1,0,0,0,
        31,174,1,0,0,0,33,178,1,0,0,0,35,180,1,0,0,0,37,182,1,0,0,0,39,187,
        1,0,0,0,41,190,1,0,0,0,43,193,1,0,0,0,45,198,1,0,0,0,47,203,1,0,
        0,0,49,207,1,0,0,0,51,210,1,0,0,0,53,212,1,0,0,0,55,215,1,0,0,0,
        57,219,1,0,0,0,59,222,1,0,0,0,61,225,1,0,0,0,63,227,1,0,0,0,65,229,
        1,0,0,0,67,232,1,0,0,0,69,235,1,0,0,0,71,237,1,0,0,0,73,239,1,0,
        0,0,75,242,1,0,0,0,77,245,1,0,0,0,79,247,1,0,0,0,81,249,1,0,0,0,
        83,252,1,0,0,0,85,255,1,0,0,0,87,259,1,0,0,0,89,264,1,0,0,0,91,270,
        1,0,0,0,93,275,1,0,0,0,95,277,1,0,0,0,97,285,1,0,0,0,99,290,1,0,
        0,0,101,300,1,0,0,0,103,309,1,0,0,0,105,323,1,0,0,0,107,108,5,112,
        0,0,108,109,5,97,0,0,109,110,5,115,0,0,110,111,5,115,0,0,111,2,1,
        0,0,0,112,113,5,112,0,0,113,114,5,114,0,0,114,115,5,105,0,0,115,
        116,5,110,0,0,116,117,5,116,0,0,117,4,1,0,0,0,118,119,5,40,0,0,119,
        6,1,0,0,0,120,121,5,41,0,0,121,8,1,0,0,0,122,123,5,105,0,0,123,124,
        5,110,0,0,124,125,5,116,0,0,125,10,1,0,0,0,126,127,5,100,0,0,127,
        128,5,111,0,0,128,129,5,117,0,0,129,130,5,98,0,0,130,131,5,108,0,
        0,131,132,5,101,0,0,132,12,1,0,0,0,133,134,5,98,0,0,134,135,5,111,
        0,0,135,136,5,111,0,0,136,137,5,108,0,0,137,14,1,0,0,0,138,139,5,
        115,0,0,139,140,5,116,0,0,140,141,5,114,0,0,141,142,5,105,0,0,142,
        143,5,110,0,0,143,144,5,103,0,0,144,16,1,0,0,0,145,146,5,61,0,0,
        146,18,1,0,0,0,147,148,5,76,0,0,148,149,5,105,0,0,149,150,5,115,
        0,0,150,151,5,116,0,0,151,20,1,0,0,0,152,153,5,91,0,0,153,22,1,0,
        0,0,154,155,5,93,0,0,155,24,1,0,0,0,156,157,5,110,0,0,157,158,5,
        100,0,0,158,159,5,76,0,0,159,160,5,105,0,0,160,161,5,115,0,0,161,
        162,5,116,0,0,162,26,1,0,0,0,163,164,5,99,0,0,164,165,5,111,0,0,
        165,166,5,110,0,0,166,167,5,115,0,0,167,168,5,116,0,0,168,28,1,0,
        0,0,169,170,5,116,0,0,170,171,5,101,0,0,171,172,5,109,0,0,172,173,
        5,112,0,0,173,30,1,0,0,0,174,175,5,102,0,0,175,176,5,111,0,0,176,
        177,5,114,0,0,177,32,1,0,0,0,178,179,5,59,0,0,179,34,1,0,0,0,180,
        181,5,58,0,0,181,36,1,0,0,0,182,183,5,97,0,0,183,184,5,117,0,0,184,
        185,5,116,0,0,185,186,5,111,0,0,186,38,1,0,0,0,187,188,5,105,0,0,
        188,189,5,110,0,0,189,40,1,0,0,0,190,191,5,105,0,0,191,192,5,102,
        0,0,192,42,1,0,0,0,193,194,5,101,0,0,194,195,5,108,0,0,195,196,5,
        105,0,0,196,197,5,102,0,0,197,44,1,0,0,0,198,199,5,101,0,0,199,200,
        5,108,0,0,200,201,5,115,0,0,201,202,5,101,0,0,202,46,1,0,0,0,203,
        204,5,100,0,0,204,205,5,101,0,0,205,206,5,102,0,0,206,48,1,0,0,0,
        207,208,5,45,0,0,208,209,5,62,0,0,209,50,1,0,0,0,210,211,5,44,0,
        0,211,52,1,0,0,0,212,213,5,111,0,0,213,214,5,114,0,0,214,54,1,0,
        0,0,215,216,5,97,0,0,216,217,5,110,0,0,217,218,5,100,0,0,218,56,
        1,0,0,0,219,220,5,61,0,0,220,221,5,61,0,0,221,58,1,0,0,0,222,223,
        5,33,0,0,223,224,5,61,0,0,224,60,1,0,0,0,225,226,5,60,0,0,226,62,
        1,0,0,0,227,228,5,62,0,0,228,64,1,0,0,0,229,230,5,60,0,0,230,231,
        5,61,0,0,231,66,1,0,0,0,232,233,5,62,0,0,233,234,5,61,0,0,234,68,
        1,0,0,0,235,236,5,43,0,0,236,70,1,0,0,0,237,238,5,45,0,0,238,72,
        1,0,0,0,239,240,5,43,0,0,240,241,5,61,0,0,241,74,1,0,0,0,242,243,
        5,45,0,0,243,244,5,61,0,0,244,76,1,0,0,0,245,246,5,42,0,0,246,78,
        1,0,0,0,247,248,5,47,0,0,248,80,1,0,0,0,249,250,5,42,0,0,250,251,
        5,61,0,0,251,82,1,0,0,0,252,253,5,47,0,0,253,254,5,61,0,0,254,84,
        1,0,0,0,255,256,5,110,0,0,256,257,5,111,0,0,257,258,5,116,0,0,258,
        86,1,0,0,0,259,260,5,116,0,0,260,261,5,114,0,0,261,262,5,117,0,0,
        262,263,5,101,0,0,263,88,1,0,0,0,264,265,5,102,0,0,265,266,5,97,
        0,0,266,267,5,108,0,0,267,268,5,115,0,0,268,269,5,101,0,0,269,90,
        1,0,0,0,270,271,5,32,0,0,271,272,5,32,0,0,272,273,5,32,0,0,273,274,
        5,32,0,0,274,92,1,0,0,0,275,276,5,10,0,0,276,94,1,0,0,0,277,281,
        7,0,0,0,278,280,7,1,0,0,279,278,1,0,0,0,280,283,1,0,0,0,281,279,
        1,0,0,0,281,282,1,0,0,0,282,96,1,0,0,0,283,281,1,0,0,0,284,286,7,
        2,0,0,285,284,1,0,0,0,286,287,1,0,0,0,287,285,1,0,0,0,287,288,1,
        0,0,0,288,98,1,0,0,0,289,291,7,2,0,0,290,289,1,0,0,0,291,292,1,0,
        0,0,292,290,1,0,0,0,292,293,1,0,0,0,293,294,1,0,0,0,294,296,5,46,
        0,0,295,297,7,2,0,0,296,295,1,0,0,0,297,298,1,0,0,0,298,296,1,0,
        0,0,298,299,1,0,0,0,299,100,1,0,0,0,300,304,5,34,0,0,301,303,9,0,
        0,0,302,301,1,0,0,0,303,306,1,0,0,0,304,305,1,0,0,0,304,302,1,0,
        0,0,305,307,1,0,0,0,306,304,1,0,0,0,307,308,5,34,0,0,308,102,1,0,
        0,0,309,310,5,47,0,0,310,311,5,47,0,0,311,315,1,0,0,0,312,314,9,
        0,0,0,313,312,1,0,0,0,314,317,1,0,0,0,315,316,1,0,0,0,315,313,1,
        0,0,0,316,318,1,0,0,0,317,315,1,0,0,0,318,319,5,10,0,0,319,320,1,
        0,0,0,320,321,6,51,0,0,321,104,1,0,0,0,322,324,7,3,0,0,323,322,1,
        0,0,0,324,325,1,0,0,0,325,323,1,0,0,0,325,326,1,0,0,0,326,327,1,
        0,0,0,327,328,6,52,0,0,328,106,1,0,0,0,8,0,281,287,292,298,304,315,
        325,1,6,0,0
    ]

class MithonLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    T__38 = 39
    T__39 = 40
    T__40 = 41
    T__41 = 42
    T__42 = 43
    T__43 = 44
    T__44 = 45
    INDENT = 46
    DEDENT = 47
    IDENTIFIER = 48
    INTEGER = 49
    DOUBLE = 50
    STRING = 51
    COMMENT = 52
    WS = 53

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'pass'", "'print'", "'('", "')'", "'int'", "'double'", "'bool'", 
            "'string'", "'='", "'List'", "'['", "']'", "'ndList'", "'const'", 
            "'temp'", "'for'", "';'", "':'", "'auto'", "'in'", "'if'", "'elif'", 
            "'else'", "'def'", "'->'", "','", "'or'", "'and'", "'=='", "'!='", 
            "'<'", "'>'", "'<='", "'>='", "'+'", "'-'", "'+='", "'-='", 
            "'*'", "'/'", "'*='", "'/='", "'not'", "'true'", "'false'", 
            "'    '", "'\\n'" ]

    symbolicNames = [ "<INVALID>",
            "INDENT", "DEDENT", "IDENTIFIER", "INTEGER", "DOUBLE", "STRING", 
            "COMMENT", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", 
                  "T__38", "T__39", "T__40", "T__41", "T__42", "T__43", 
                  "T__44", "INDENT", "DEDENT", "IDENTIFIER", "INTEGER", 
                  "DOUBLE", "STRING", "COMMENT", "WS" ]

    grammarFileName = "Mithon.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


