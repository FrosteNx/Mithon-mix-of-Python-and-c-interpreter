# Generated from Mithon.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,56,358,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,1,0,1,0,1,0,1,0,1,0,1,1,1,
        1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,
        6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,
        9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,12,
        1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
        1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,
        1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,
        1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,
        1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,28,
        1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,
        1,32,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,
        1,37,1,37,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,42,
        1,42,1,43,1,43,1,43,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,46,1,46,
        1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,
        1,48,1,48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,50,1,50,
        5,50,309,8,50,10,50,12,50,312,9,50,1,51,4,51,315,8,51,11,51,12,51,
        316,1,52,4,52,320,8,52,11,52,12,52,321,1,52,1,52,4,52,326,8,52,11,
        52,12,52,327,1,53,1,53,5,53,332,8,53,10,53,12,53,335,9,53,1,53,1,
        53,1,54,1,54,1,54,1,54,5,54,343,8,54,10,54,12,54,346,9,54,1,54,1,
        54,1,54,1,54,1,55,4,55,353,8,55,11,55,12,55,354,1,55,1,55,2,333,
        344,0,56,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
        12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,
        23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,
        34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,
        45,91,46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,
        55,111,56,1,0,4,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,
        122,1,0,48,57,3,0,9,10,13,13,32,32,364,0,1,1,0,0,0,0,3,1,0,0,0,0,
        5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,
        1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,
        1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,
        1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,
        1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,
        1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,
        1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,
        1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,
        1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,
        1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,
        105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,1,113,1,0,
        0,0,3,118,1,0,0,0,5,120,1,0,0,0,7,122,1,0,0,0,9,128,1,0,0,0,11,130,
        1,0,0,0,13,132,1,0,0,0,15,136,1,0,0,0,17,143,1,0,0,0,19,148,1,0,
        0,0,21,155,1,0,0,0,23,160,1,0,0,0,25,162,1,0,0,0,27,167,1,0,0,0,
        29,169,1,0,0,0,31,171,1,0,0,0,33,178,1,0,0,0,35,184,1,0,0,0,37,189,
        1,0,0,0,39,193,1,0,0,0,41,195,1,0,0,0,43,198,1,0,0,0,45,204,1,0,
        0,0,47,207,1,0,0,0,49,212,1,0,0,0,51,217,1,0,0,0,53,221,1,0,0,0,
        55,224,1,0,0,0,57,226,1,0,0,0,59,233,1,0,0,0,61,236,1,0,0,0,63,240,
        1,0,0,0,65,243,1,0,0,0,67,246,1,0,0,0,69,248,1,0,0,0,71,250,1,0,
        0,0,73,253,1,0,0,0,75,256,1,0,0,0,77,258,1,0,0,0,79,260,1,0,0,0,
        81,263,1,0,0,0,83,266,1,0,0,0,85,268,1,0,0,0,87,270,1,0,0,0,89,273,
        1,0,0,0,91,276,1,0,0,0,93,280,1,0,0,0,95,285,1,0,0,0,97,291,1,0,
        0,0,99,297,1,0,0,0,101,306,1,0,0,0,103,314,1,0,0,0,105,319,1,0,0,
        0,107,329,1,0,0,0,109,338,1,0,0,0,111,352,1,0,0,0,113,114,5,112,
        0,0,114,115,5,97,0,0,115,116,5,115,0,0,116,117,5,115,0,0,117,2,1,
        0,0,0,118,119,5,123,0,0,119,4,1,0,0,0,120,121,5,125,0,0,121,6,1,
        0,0,0,122,123,5,112,0,0,123,124,5,114,0,0,124,125,5,105,0,0,125,
        126,5,110,0,0,126,127,5,116,0,0,127,8,1,0,0,0,128,129,5,40,0,0,129,
        10,1,0,0,0,130,131,5,41,0,0,131,12,1,0,0,0,132,133,5,105,0,0,133,
        134,5,110,0,0,134,135,5,116,0,0,135,14,1,0,0,0,136,137,5,100,0,0,
        137,138,5,111,0,0,138,139,5,117,0,0,139,140,5,98,0,0,140,141,5,108,
        0,0,141,142,5,101,0,0,142,16,1,0,0,0,143,144,5,98,0,0,144,145,5,
        111,0,0,145,146,5,111,0,0,146,147,5,108,0,0,147,18,1,0,0,0,148,149,
        5,115,0,0,149,150,5,116,0,0,150,151,5,114,0,0,151,152,5,105,0,0,
        152,153,5,110,0,0,153,154,5,103,0,0,154,20,1,0,0,0,155,156,5,78,
        0,0,156,157,5,111,0,0,157,158,5,110,0,0,158,159,5,101,0,0,159,22,
        1,0,0,0,160,161,5,61,0,0,161,24,1,0,0,0,162,163,5,76,0,0,163,164,
        5,105,0,0,164,165,5,115,0,0,165,166,5,116,0,0,166,26,1,0,0,0,167,
        168,5,91,0,0,168,28,1,0,0,0,169,170,5,93,0,0,170,30,1,0,0,0,171,
        172,5,110,0,0,172,173,5,100,0,0,173,174,5,76,0,0,174,175,5,105,0,
        0,175,176,5,115,0,0,176,177,5,116,0,0,177,32,1,0,0,0,178,179,5,99,
        0,0,179,180,5,111,0,0,180,181,5,110,0,0,181,182,5,115,0,0,182,183,
        5,116,0,0,183,34,1,0,0,0,184,185,5,116,0,0,185,186,5,101,0,0,186,
        187,5,109,0,0,187,188,5,112,0,0,188,36,1,0,0,0,189,190,5,102,0,0,
        190,191,5,111,0,0,191,192,5,114,0,0,192,38,1,0,0,0,193,194,5,59,
        0,0,194,40,1,0,0,0,195,196,5,105,0,0,196,197,5,110,0,0,197,42,1,
        0,0,0,198,199,5,119,0,0,199,200,5,104,0,0,200,201,5,105,0,0,201,
        202,5,108,0,0,202,203,5,101,0,0,203,44,1,0,0,0,204,205,5,105,0,0,
        205,206,5,102,0,0,206,46,1,0,0,0,207,208,5,101,0,0,208,209,5,108,
        0,0,209,210,5,105,0,0,210,211,5,102,0,0,211,48,1,0,0,0,212,213,5,
        101,0,0,213,214,5,108,0,0,214,215,5,115,0,0,215,216,5,101,0,0,216,
        50,1,0,0,0,217,218,5,100,0,0,218,219,5,101,0,0,219,220,5,102,0,0,
        220,52,1,0,0,0,221,222,5,45,0,0,222,223,5,62,0,0,223,54,1,0,0,0,
        224,225,5,44,0,0,225,56,1,0,0,0,226,227,5,114,0,0,227,228,5,101,
        0,0,228,229,5,116,0,0,229,230,5,117,0,0,230,231,5,114,0,0,231,232,
        5,110,0,0,232,58,1,0,0,0,233,234,5,111,0,0,234,235,5,114,0,0,235,
        60,1,0,0,0,236,237,5,97,0,0,237,238,5,110,0,0,238,239,5,100,0,0,
        239,62,1,0,0,0,240,241,5,61,0,0,241,242,5,61,0,0,242,64,1,0,0,0,
        243,244,5,33,0,0,244,245,5,61,0,0,245,66,1,0,0,0,246,247,5,60,0,
        0,247,68,1,0,0,0,248,249,5,62,0,0,249,70,1,0,0,0,250,251,5,60,0,
        0,251,252,5,61,0,0,252,72,1,0,0,0,253,254,5,62,0,0,254,255,5,61,
        0,0,255,74,1,0,0,0,256,257,5,43,0,0,257,76,1,0,0,0,258,259,5,45,
        0,0,259,78,1,0,0,0,260,261,5,43,0,0,261,262,5,61,0,0,262,80,1,0,
        0,0,263,264,5,45,0,0,264,265,5,61,0,0,265,82,1,0,0,0,266,267,5,42,
        0,0,267,84,1,0,0,0,268,269,5,47,0,0,269,86,1,0,0,0,270,271,5,42,
        0,0,271,272,5,61,0,0,272,88,1,0,0,0,273,274,5,47,0,0,274,275,5,61,
        0,0,275,90,1,0,0,0,276,277,5,110,0,0,277,278,5,111,0,0,278,279,5,
        116,0,0,279,92,1,0,0,0,280,281,5,116,0,0,281,282,5,114,0,0,282,283,
        5,117,0,0,283,284,5,101,0,0,284,94,1,0,0,0,285,286,5,102,0,0,286,
        287,5,97,0,0,287,288,5,108,0,0,288,289,5,115,0,0,289,290,5,101,0,
        0,290,96,1,0,0,0,291,292,5,98,0,0,292,293,5,114,0,0,293,294,5,101,
        0,0,294,295,5,97,0,0,295,296,5,107,0,0,296,98,1,0,0,0,297,298,5,
        99,0,0,298,299,5,111,0,0,299,300,5,110,0,0,300,301,5,116,0,0,301,
        302,5,105,0,0,302,303,5,110,0,0,303,304,5,117,0,0,304,305,5,101,
        0,0,305,100,1,0,0,0,306,310,7,0,0,0,307,309,7,1,0,0,308,307,1,0,
        0,0,309,312,1,0,0,0,310,308,1,0,0,0,310,311,1,0,0,0,311,102,1,0,
        0,0,312,310,1,0,0,0,313,315,7,2,0,0,314,313,1,0,0,0,315,316,1,0,
        0,0,316,314,1,0,0,0,316,317,1,0,0,0,317,104,1,0,0,0,318,320,7,2,
        0,0,319,318,1,0,0,0,320,321,1,0,0,0,321,319,1,0,0,0,321,322,1,0,
        0,0,322,323,1,0,0,0,323,325,5,46,0,0,324,326,7,2,0,0,325,324,1,0,
        0,0,326,327,1,0,0,0,327,325,1,0,0,0,327,328,1,0,0,0,328,106,1,0,
        0,0,329,333,5,34,0,0,330,332,9,0,0,0,331,330,1,0,0,0,332,335,1,0,
        0,0,333,334,1,0,0,0,333,331,1,0,0,0,334,336,1,0,0,0,335,333,1,0,
        0,0,336,337,5,34,0,0,337,108,1,0,0,0,338,339,5,47,0,0,339,340,5,
        47,0,0,340,344,1,0,0,0,341,343,9,0,0,0,342,341,1,0,0,0,343,346,1,
        0,0,0,344,345,1,0,0,0,344,342,1,0,0,0,345,347,1,0,0,0,346,344,1,
        0,0,0,347,348,5,10,0,0,348,349,1,0,0,0,349,350,6,54,0,0,350,110,
        1,0,0,0,351,353,7,3,0,0,352,351,1,0,0,0,353,354,1,0,0,0,354,352,
        1,0,0,0,354,355,1,0,0,0,355,356,1,0,0,0,356,357,6,55,0,0,357,112,
        1,0,0,0,8,0,310,316,321,327,333,344,354,1,6,0,0
    ]

class MithonLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    T__38 = 39
    T__39 = 40
    T__40 = 41
    T__41 = 42
    T__42 = 43
    T__43 = 44
    T__44 = 45
    T__45 = 46
    T__46 = 47
    T__47 = 48
    T__48 = 49
    T__49 = 50
    IDENTIFIER = 51
    INTEGER = 52
    DOUBLE = 53
    STRING = 54
    COMMENT = 55
    WS = 56

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'pass'", "'{'", "'}'", "'print'", "'('", "')'", "'int'", "'double'", 
            "'bool'", "'string'", "'None'", "'='", "'List'", "'['", "']'", 
            "'ndList'", "'const'", "'temp'", "'for'", "';'", "'in'", "'while'", 
            "'if'", "'elif'", "'else'", "'def'", "'->'", "','", "'return'", 
            "'or'", "'and'", "'=='", "'!='", "'<'", "'>'", "'<='", "'>='", 
            "'+'", "'-'", "'+='", "'-='", "'*'", "'/'", "'*='", "'/='", 
            "'not'", "'true'", "'false'", "'break'", "'continue'" ]

    symbolicNames = [ "<INVALID>",
            "IDENTIFIER", "INTEGER", "DOUBLE", "STRING", "COMMENT", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", 
                  "T__38", "T__39", "T__40", "T__41", "T__42", "T__43", 
                  "T__44", "T__45", "T__46", "T__47", "T__48", "T__49", 
                  "IDENTIFIER", "INTEGER", "DOUBLE", "STRING", "COMMENT", 
                  "WS" ]

    grammarFileName = "Mithon.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


